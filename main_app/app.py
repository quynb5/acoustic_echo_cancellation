import io
import numpy as np
import soundfile as sf
import streamlit as st
import matplotlib.pyplot as plt

from scipy.signal import welch
from .model import acoustic_echo_cancellation

# H√†m v·∫Ω bi·ªÉu ƒë·ªì d·∫°ng s√≥ng c·ªßa t√≠n hi·ªáu √¢m thanh
def plot_waveform(audio, samplerate, title):
    times = np.linspace(0, len(audio) / samplerate, num=len(audio))  # T√≠nh tr·ª•c th·ªùi gian
    plt.figure(figsize=(10, 5))
    plt.plot(times, audio, color='black')  # V·∫Ω t√≠n hi·ªáu √¢m thanh
    plt.xlabel("Time (secs)")
    plt.ylabel("Amplitude")
    plt.title(title)
    plt.grid()
    st.pyplot(plt)
    
# H√†m v·∫Ω ph·ªï t·∫ßn s·ªë c·ªßa t√≠n hi·ªáu √¢m thanh
def plot_frequency_response(audio, samplerate, title):
    freqs, psd = welch(audio, samplerate, nperseg=1024)
    plt.figure(figsize=(10, 5))
    plt.semilogy(freqs, psd)
    plt.xlabel("Frequency (Hz)")
    plt.ylabel("Power Spectral Density")
    plt.title(title)
    plt.grid()
    st.pyplot(plt)

# H√†m ch√≠nh ƒë·ªÉ ch·∫°y ·ª©ng d·ª•ng Streamlit
def app(model):
    st.set_page_config(layout="wide")

    st.title("üîä AEC (Acoustic Echo Cancellation) Demo")

    # Giao di·ªán upload file √¢m thanh
    col1, col2, _ = st.columns([1, 1, 1])
    with col1:
        st.subheader("üìÇ Upload Mic Audio File")
        uploaded_mic_audio = st.file_uploader("Upload mic audio file", type=["wav", "mp3"], label_visibility='collapsed', key="file1")

    with col2:
        st.subheader("üìÇ Upload Ref Audio File")
        uploaded_ref_audio = st.file_uploader("Upload ref audio file", type=["wav", "mp3"], label_visibility='collapsed', key="file2")

    # N√∫t nh·∫•n x·ª≠ l√Ω √¢m thanh
    st.subheader("üõ†Ô∏è Process Audio")
    # T·∫°o giao di·ªán n√∫t x·ª≠ l√Ω √¢m thanh
    st.markdown("""
    <style>
    div.stButton > button {
        background-color: #4CAF50;
        color: white;
        font-weight: bold;
        border-radius: 10px;
        padding: 10px;
    }
    </style>
    """, unsafe_allow_html=True)
    process_clicked = st.button("Process Audio")

    # Bi·∫øn tr·∫°ng th√°i ƒë·ªÉ ki·ªÉm tra ƒë√£ x·ª≠ l√Ω hay ch∆∞a
    if 'processed' not in st.session_state:
        st.session_state.processed = False

    # X·ª≠ l√Ω √¢m thanh n·∫øu n√∫t ƒë∆∞·ª£c nh·∫•n
    if process_clicked:
        # Ki·ªÉm tra xem ƒë√£ upload c·∫£ hai file √¢m thanh ch∆∞a
        if uploaded_mic_audio is not None and uploaded_ref_audio is not None:
            # ƒê·ªçc file √¢m thanh
            mic_audio, mic_samplerate = sf.read(uploaded_mic_audio)
            ref_audio, ref_samplerate = sf.read(uploaded_ref_audio)
            
            # Ki·ªÉm tra xem hai file c√≥ c√πng t·∫ßn s·ªë l·∫•y m·∫´u kh√¥ng
            if mic_samplerate != ref_samplerate:
                # Th√¥ng b√°o l·ªói n·∫øu t·∫ßn s·ªë l·∫•y m·∫´u kh√¥ng kh·ªõp
                st.error("L·ªói: T·∫ßn s·ªë l·∫•y m·∫´u c·ªßa hai file √¢m thanh kh√¥ng kh·ªõp.")
            else:
                # X·ª≠ l√Ω AEC (Lo·∫°i b·ªè ti·∫øng v·ªçng)
                processed_audio = acoustic_echo_cancellation(
                    model, mic_audio, ref_audio, mic_samplerate, align=False
                )
                
                # L∆∞u file x·ª≠ l√Ω v√†o buffer
                buffer = io.BytesIO()
                sf.write(buffer, processed_audio, mic_samplerate, format='WAV')
                buffer.seek(0)
                
                # C·∫≠p nh·∫≠t c√°c tr·∫°ng th√°i
                st.session_state.processed = True
                st.session_state.mic_audio = mic_audio
                st.session_state.ref_audio = ref_audio
                st.session_state.processed_audio = processed_audio
                st.session_state.samplerate = mic_samplerate
        else:
            # Th√¥ng b√°o l·ªói n·∫øu ch∆∞a t·∫£i l√™n c·∫£ hai file √¢m thanh
            st.warning("‚ö†Ô∏è Vui l√≤ng t·∫£i l√™n c·∫£ hai file √¢m thanh tr∆∞·ªõc khi x·ª≠ l√Ω.")

    # Ki·ªÉm tra xem ƒë√£ x·ª≠ l√Ω √¢m thanh ch∆∞a
    if st.session_state.processed:
        # T·∫°o ti√™u ƒë·ªÅ v√† hi·ªÉn th·ªã bi·ªÉu ƒë·ªì s√≥ng c·ªßa t√≠n hi·ªáu √¢m thanh
        st.subheader("üìä AEC Frequency Spectrum")
        col3, col4, col5 = st.columns(3)
        with col3:
            # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì s√≥ng c·ªßa t√≠n hi·ªáu √¢m thanh
            plot_waveform(st.session_state.mic_audio, st.session_state.samplerate, "Mic Audio Waveform")
        with col4:
            plot_waveform(st.session_state.ref_audio, st.session_state.samplerate, "Ref Audio Waveform")
        with col5:
            plot_waveform(st.session_state.processed_audio, st.session_state.samplerate, "Processed Audio Waveform")
        
        # Hi·ªÉn th·ªã v√† cho ph√©p t·∫£i xu·ªëng file √¢m thanh ƒë√£ x·ª≠ l√Ω
        buffer = io.BytesIO()
        sf.write(buffer, st.session_state.processed_audio, st.session_state.samplerate, format='WAV')
        buffer.seek(0)
        st.audio(buffer, format='audio/wav')
        # T·∫°o n√∫t t·∫£i xu·ªëng file √¢m thanh ƒë√£ x·ª≠ l√Ω
        st.download_button("‚¨áÔ∏è Download Processed Audio", buffer, file_name="processed_audio.wav", mime="audio/wav")
    else:
        # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì ph·ªï t·∫ßn s·ªë tr·ªëng ban ƒë·∫ßu
        st.subheader("üìä Frequency Spectrum")
        col1, col2, col3 = st.columns(3)
        with col1:
            plot_frequency_response(np.zeros(1024), 44100, "Mic Audio Spectrum")
        with col2:
            plot_frequency_response(np.zeros(1024), 44100, "Ref Audio Spectrum")
        with col3:
            plot_frequency_response(np.zeros(1024), 44100, "Processed Audio Spectrum")
